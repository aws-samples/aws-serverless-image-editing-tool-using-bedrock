AWSTemplateFormatVersion: 2010-09-09
Description: This CloudFormation template will create Cognito, API Gateway and a Lambda function.

Resources:
  ImageEditBackendRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AmazonBedrockAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'bedrock:InvokeModel'
                Resource: 'arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-image-generator-v2:0'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'      
                

# Create Private API and Lambda

  MyApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: ImageEditingAppBackendAPI
      Policy:
        Statement:
          - Action: 'execute-api:Invoke'
            Effect: Allow
            Principal: '*'
            Resource: 'execute-api:/*'
        Version: 2012-10-17

  MyCognitoUserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: CognitoUserPoolforImageEditApp

  MyCognitoUserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: ImageEditApp
      UserPoolId: !Ref MyCognitoUserPool
      GenerateSecret: false

  MyCognitoUserPoolAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      Name: CognitoAuthorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref MyApiGateway
      Type: COGNITO_USER_POOLS
      ProviderARNs: 
        - !GetAtt MyCognitoUserPool.Arn

  MyApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref MyApiGateway
      Description: Automatically created by the RestApi construct
    DependsOn:
      - MyApiGatewayMethod
 #     - MyApiGatewayResource
      
  APIStageDev:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      RestApiId: !Ref MyApiGateway
      DeploymentId: !Ref MyApiGatewayDeployment
      StageName: dev

  MyApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApiGateway
      ResourceId: !GetAtt MyApiGateway.RootResourceId
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref MyCognitoUserPoolAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ImageEditBackend.Arn}/invocations"

  OptionsMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId: !Ref MyApiGateway
        ResourceId: !GetAtt MyApiGateway.RootResourceId
        HttpMethod: OPTIONS
        AuthorizationType: NONE
        Integration:
          Type: MOCK
          RequestTemplates:
            application/json: '{"statusCode": 200}'
          IntegrationResponses:
            - StatusCode: 200
              ResponseTemplates:
                application/json: '{}'
              ResponseParameters:
                method.response.header.Access-Control-Allow-Origin: "'*'"
                method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                method.response.header.Access-Control-Allow-Headers: "'access-control-allow-headers,access-control-allow-origin,Content-Type,Authorization'"    
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Headers: true    

  LambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName: !Ref ImageEditBackend
        Action: 'lambda:InvokeFunction'
        Principal: 'apigateway.amazonaws.com'
        SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/POST/'

  ImageEditBackend:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      Timeout: '300'
      Handler: index.handler
      Role: !GetAtt ImageEditBackendRole.Arn
      Code:
        ZipFile: |
            #!/usr/bin/env python3

            import boto3
            import logging
            import traceback
            import json
            import re
            import base64
            from io import BytesIO
            from random import randint            

            CFN_CLIENT = boto3.client('cloudformation')

            LOGGER = logging.getLogger()
            LOGGER.setLevel(logging.INFO)

 
            def validate_request_body(event):
                try:
                    body = json.loads(event['body'])
                except (KeyError, json.JSONDecodeError):
                    return {'error': 'Invalid request body'}

                try:
                    prompt_content = body['prompt']['text']
                    painting_mode = body['prompt']['mode']
                    mask_base64 = body['mask'].split(",")[1]
                    image_base64 = body['base_image'].split(",")[1]
                except (KeyError, IndexError):
                    return {'error': 'Missing required parameters'}

                return {
                    'prompt_content': prompt_content,
                    'painting_mode': painting_mode,
                    'mask_base64': mask_base64,
                    'image_base64': image_base64
                }

            def prepare_image_generation_config(painting_mode, prompt_content, mask_base64, image_base64):
                image_generation_config = {
                    "taskType": painting_mode,
                    "imageGenerationConfig": {
                        "numberOfImages": 2,
                        "quality": "premium",
                        "height": 1024,
                        "width": 1024,
                        "cfgScale": 8.0,
                        "seed": randint(0, 100000),
                    },
                }

                params = {
                    "image": image_base64,
                    "text": prompt_content,
                    "maskImage": mask_base64
                }

                if painting_mode == 'OUTPAINTING':
                    params['outPaintingMode'] = 'DEFAULT'
                    image_generation_config['outPaintingParams'] = params
                elif painting_mode == 'precise-outpaint':
                    params['outPaintingMode'] = 'PRECISE'
                    image_generation_config['outPaintingParams'] = params
                else:
                    image_generation_config['inPaintingParams'] = params

                return json.dumps(image_generation_config)

            def invoke_bedrock_model(body):
                try:
                    session = boto3.Session()
                    bedrock = session.client(service_name='bedrock-runtime')
                    response_bedrock = bedrock.invoke_model(body=body, modelId="amazon.titan-image-generator-v2:0", contentType="application/json", accept="application/json")

                    response_output = json.loads(response_bedrock.get('body').read())
                    images = response_output.get('images')
                    return images
                except Exception as e:
                    error_message = str(e)
                    raise Exception(f"Error invoking Bedrock model: {error_message}")

            def handler(event, context):
                # Validate the request body
                request_data = validate_request_body(event)
                if 'error' in request_data:
                    return {
                        'statusCode': 400,
                        'headers': get_cors_headers(),
                        'body': json.dumps({'error': request_data['error']})
                    }

                # Prepare the image generation configuration
                prompt_content = request_data['prompt_content']
                painting_mode = request_data['painting_mode']
                mask_base64 = request_data['mask_base64']
                image_base64 = request_data['image_base64']

                body = prepare_image_generation_config(painting_mode, prompt_content, mask_base64, image_base64)

                try:
                    # Invoke the Bedrock model
                    images = invoke_bedrock_model(body)

                    # Return the response with CORS headers
                    return {
                        'statusCode': 200,
                        'headers': get_cors_headers(),
                        'body': json.dumps({'images': images})
                    }
                except Exception as e:
                    # Return an error response
                    return {
                        'statusCode': 500,
                        'headers': get_cors_headers(),
                        'body': json.dumps({'error': str(e)})
                    }

            def get_cors_headers():
                return {
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Headers': 'Access-Control-Allow-Headers,Access-Control-Allow-Origin,Content-Type,Authorization',
                    'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                }

Outputs:
  userPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref MyCognitoUserPool

  userPoolClientId:
    Description: "Cognito User Pool AppClient ID"
    Value: !Ref MyCognitoUserPoolClient            

  invokeUrl:
    Description: "API Gateway Invoke URL"
    Value: 
      Fn::Sub: "https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev"
  





